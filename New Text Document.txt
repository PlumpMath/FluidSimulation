/*
		if(numActiveParticles > 3)
		{
			float minX = Float.MAX_VALUE;
			float minY = Float.MAX_VALUE;
			int leastXIndex = 0, leastYIndex = 0;
			float maxX = Float.MIN_VALUE;
			float maxY = Float.MIN_VALUE;
			int greatestXIndex = 0, greatestYIndex = 0;
			for(int i = 0; i < activeParticles.size(); i++)
			{
				Particle particle = liquid[activeParticles.get(i)];
				if(particle.position.x < minX)
				{
					minX = particle.position.x;
					leastXIndex = activeParticles.get(i);
					continue;
				}
				if(particle.position.x > maxX)
				{
					maxX = particle.position.x;
					greatestXIndex = activeParticles.get(i);
					continue;
				}
			}
			for(int i = 0; i < activeParticles.size(); i++)
			{
				Particle particle = liquid[activeParticles.get(i)];
				if(particle.position.y < minY)
				{
					minY = particle.position.y;
					leastYIndex = activeParticles.get(i);
					continue;
				}
				if(particle.position.y > maxY)
				{
					maxY = particle.position.y;
					greatestYIndex = activeParticles.get(i);
					continue;
				}
			}
			
			if((int)((maxX-minX)*OPENGL_SCALE) > 0 && (int)((maxY-minY)*OPENGL_SCALE) > 0)
			{
				waterImage = new BufferedImage((int)((maxX-minX)*OPENGL_SCALE), (int)((maxY-minY)*OPENGL_SCALE), BufferedImage.TYPE_INT_ARGB);
				Graphics2D graphics = (Graphics2D)waterImage.getGraphics();
				Composite translucent = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f);
		        graphics.setComposite(translucent);
		        for (int i = 0; i < numActiveParticles; i++)
			    {
			        Particle particle = liquid[activeParticles.get(i)];
			        graphics.setColor(Color.blue);
			        graphics.fillRect(0, 0, waterImage.getWidth(), waterImage.getHeight());
			        //graphics.fillRect((int)((particle.position.x-minX)*OPENGL_SCALE), (int)((particle.position.y-minY)*OPENGL_SCALE), 1, 1);
			    }
		        waterTexture = null;
		        try {
					waterTexture = BufferedImageUtil.getTexture("waterImage", waterImage);
				} catch (IOException e) {
					e.printStackTrace();
				}
		        GL11.glPushMatrix();
		        waterTexture.bind();
		        GL11.glTranslatef(minX, minY, 0.0f);
		        GL11.glBegin(GL11.GL_QUADS);
			        GL11.glTexCoord2d(0.0,0.0); GL11.glVertex2d(0.0,0.0);
			        GL11.glTexCoord2d(1.0,0.0); GL11.glVertex2d(waterImage.getWidth()*BOX2D_SCALE,0.0);
			        GL11.glTexCoord2d(1.0,1.0); GL11.glVertex2d(waterImage.getWidth()*BOX2D_SCALE, waterImage.getHeight()*BOX2D_SCALE);
			        GL11.glTexCoord2d(0.0,1.0); GL11.glVertex2d(0.0, waterImage.getHeight()*BOX2D_SCALE);
		       	GL11.glEnd();
		       	GL11.glPopMatrix();
			}
		}
		*/